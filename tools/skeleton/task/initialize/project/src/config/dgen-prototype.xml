<?xml version="1.0" encoding="UTF-8"?>
<generator_prototype xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.dima.tu-berlin.de/myriad/prototype">

  <!-- configurable parameters -->
  <parameters>
    <!-- naming convention {generator_name}.{parameter_name} -->
    <parameter key="sample_type.sequence.base_cardinality">1000</parameter>
  </parameters>

  <!-- function configuration -->
  <functions>
    <!-- supported probability types: -->
    <!--  * uniform_probability[T](T: x_min, T: x_max) -->
    <!--  * normal_probability(Decimal: mean, Decimal: stddev) -->
    <!--  * custom_discrete_probability[T](String: path) -->
    <function key='Pr[customer.pk]' type='uniform_probability[I64u]'>
      <argument key='x_min' type='I64u' value='1' />
      <argument key='x_max' type='I64u' value='${%customer.sequence.cardinality% + 1}' />
    </function>
  </functions>

  <!-- enumeration types -->
  <enum_sets>
    <!-- 
    <enum_set key="CardSuit">
      <item value="Spades" />
      <item value="Hearts" />
      <item value="Diamonds" />
      <item value="Clubs" />
    </enum_set>
    -->
  </enum_sets>

  <record_sequences>
    <!-- users -->
    <random_sequence key="sample_type">
      <record_type>
        <field name="pk" type="I64u" />
        <!-- add more fields and references here, supported types are: -->
        <!--  * core types: I16, I16u, I32, I32u, I64, I64u, Decimal, String, Date -->
        <!--  * enum types: Enum, with an additional enumref='{enum_set.key}' attribute -->
        <!--  * ref. types: all record_sequence keys defined in this XML document -->
        <!--
        <field name='some_enum_parameter' type='Enum' enumref='enumset.key' />
        <reference name='reference_alias' type='othertype_key' />
        -->
      </record_type>
      <setter_chain>
        <setter key='set_pk' type='field_setter'>
          <argument key='field' type='field_ref' ref='customer:pk' />
          <argument key='value' type='clustered_value_provider'>
            <argument key='probability' type='function_ref' ref='Pr[sample_type.pk]' />
            <argument key='cardinality' type='const_range_provider'>
              <argument key='min' type='I64u' value='0' />
              <argument key='max' type='I64u' value='%customer.sequence.cardinality%' />
            </argument>
          </argument>
        </setter>
        <!-- add more hydrators here, supported hydrator types are: -->
        <!--  * randomized_sequence_hydrator<RT>(RT#Setter: field, I64u: cardinality, I64u: begin, I64u: end) -->
      </setter_chain>
      <!-- supported cardinality estimator types are: -->
      <!--  * linear_scale_estimator(I64u: base_cardinality) -->
      <cardinality_estimator type="linear_scale_estimator">
        <argument key="base_cardinality" type="I64u" value="%sample_type.sequence.base_cardinality%" />
      </cardinality_estimator>
      <!-- supported sequence_iterator types: -->
      <!--  * partitioned_iterator() -->
      <sequence_iterator type="partitioned_iterator" />
    </random_sequence>
  </record_sequences>
</generator_prototype>